% scatterbylib do a scatter plot for x = property1 (pp1) and y = property2
% (pp2), with specified format
% USAGE
%   dtS = {'Area_OnePhoton','GRratioMean_OnePhoton','dFF0_shortStim_OnePhoton',...
%     'dFF0_longStim_OnePhoton','Bleachingratio_total_OnePhoton','GRratioMean_TwoPhoton',...
%     'dFF0_shortStim_TwoPhoton','dFF0_longStim_TwoPhoton','Bleachingratio_total_TwoPhoton'};
%   cmap = colormap(colorcube(60));
%   libplot.scatterbylib(Screening,'DI_long_OnePhoton',...
%   'DI_short_OnePhoton','controls',{'ASAP2'},'datatip',dtS,'colormap',cmap);
% INPUT 
%   REQUIRED: Table(libTable), property 1 (pp1, x-axis) which belongs to one of the variable names
%    property 2 (pp2, y-axis) which belongs to one of the variable names
%   PARAMETERS (Name-value pairs):
%       pp3: property 3, another variable, specify the size of dots
%       norm2ctrl: normalize x&y values to control row
%       controls: specify the controls to scatter with red cross
%       selectLib: % plot specified libraries
%       colormap: 3xn matrix. n >= number of properties. default: lines
%       parse_on: specify the column of names to parse on, this should be
%       in the formats (e.g.) "ASAP1-R415 (P0A7)" or "[JEDI-1P] (P0A7)"
%       mask_on: filter the table by which column. default: 'masked'
%       mskth: a number specify the masking threshold. default is 0.
%       datatip: properties & values to be added into the datatip
% OUTPUT:
%       handles to figure(f1) cursor(c1) datatip(d) and s(scatters)
% Xiaoyu updated on May 20th, 2020

function [libTable,f1,c1,d1,s1] = scatterbylib1d(libTable, pp1,varargin)
    %% parse input
    c = colormap(lines);
    p = inputParser;
    p.addRequired('libTable', @istable);
    p.addRequired('pp1', @(x) any(strcmp(x, libTable.Properties.VariableNames)));
    p.addParameter('norm2ctrl',{}, @(n) validateattributes(n,{'cell'},{'size',[1,1]})) % assign the control for normalization 
    p.addParameter('controls', {}, @iscell) % assign the control for scatter
    p.addParameter('selectLib', {}, @iscell)  % plot specified libraries
    p.addParameter('colormap', c, @isnumeric);
    p.addParameter('parse_on', 'Name', @(x) any(strcmp(x, libTable.Properties.VariableNames)));
    p.addParameter('mask_on', 'masked', @ischar);
    p.addParameter('mskth', 0, @isnumeric);
    p.addParameter('figshow', true, @(n) validateattributes(n, ...
        {'logical'},{'scalar'}));
    p.addParameter('datatip', {}, @iscell) % plot specified libraries    
    p.parse(libTable,pp1,varargin{:})
    controls = p.Results.controls;  
    selectLib = p.Results.selectLib;  
    figshow = p.Results.figshow; 
    cmap = p.Results.colormap;
    norm2ctrl = p.Results.norm2ctrl;
    parse_on =  p.Results.parse_on;
    mask_on = p.Results.mask_on;
    mskth =  p.Results.mskth;
    datatip = p.Results.datatip;
    % Standardize table content
    if ~any(strcmp('pPlateWell', libTable.Properties.VariableNames))
        libTable = libplot.tableparse(libTable,'parse_on',parse_on,'mask_on',mask_on,'mskth',mskth);
    end
   
    % Filter selected libraries
    
    
    %% Scatter libraries
    doNorm = ~isempty(norm2ctrl);
    switch doNorm
        case 0
            doScatter(libTable,pp1,controls,selectLib,figshow,cmap,norm2ctrl,datatip);
        case 1
            pp1col = find(strcmp(pp1,libTable.Properties.VariableNames));
            normctrlsel = strmatch(norm2ctrl{1}, libTable.plibName,'exact');
            Tnormctrl = libTable(normctrlsel,:);
            meanctrlppl = mean(Tnormctrl{:,pp1col});
            libTable.normpp1 = libTable{:,pp1col}/meanctrlppl;
            newpp1 = strcat(pp1,'Normalized to',norm2ctrl{1});
            libTable.Properties.VariableNames{end} = newpp1;
            [f1,c1,d1,s1] = doScatter(libTable,newpp1,controls,selectLib,figshow,cmap,norm2ctrl,datatip); 
    end
end

function [f,c,d,s] = doScatter(libTable,pp1,controls,selectLib,figshow,cmap,norm2ctrl,datatip)
    % Decide properties to plot
    LibPos = unique(libTable.plibName);
    % Default: plot no control
    ctrlsel = [];
    if ~isempty(controls)  
        for i = 1:length(controls)
            ctrlsel = [ctrlsel,strmatch(controls{i}, LibPos,'exact')] ;
        end
    end
    % Default: plot all libraries
    libsel = [];
    if ~isempty(selectLib)
        for i = 1:length(selectLib)
            libsel = [libsel,reshape(strmatch(selectLib{i}, LibPos,'exact'),1,[])] ;
        end
    else
        libsel = 1:length(LibPos);
    end
    libsel = setdiff(libsel,ctrlsel);
    pp1col = find(strcmp(pp1,libTable.Properties.VariableNames));
    pp2col = find(strcmp('position',libTable.Properties.VariableNames));
    libcol = find(strcmp('plibName',libTable.Properties.VariableNames));
    pwcol = find(strcmp('pPlateWell',libTable.Properties.VariableNames));
    f = figure();
    hold on
    for l = 1:length(libsel)
        librange = find(cellfun(@(x)~isempty(strfind(x,LibPos{libsel(l)})), libTable.plibName));
        if iscell(libTable{librange,pp1col})
            p1 = cell2mat(libTable{librange,pp1col});
        else
            p1 = libTable{librange,pp1col};
        end
        p2 = ones(size(p1))*l+0.5*rand(size(p1))-0.25;
        csel = ones(length(p1),1)*cmap(l,:);
        s = scatter(p2,p1,[],csel,'filled','MarkerFaceAlpha',0.5);
        s.DataTipTemplate.DataTipRows(1).Label = pp1;
        s.DataTipTemplate.DataTipRows(2).Label = '';
%         row = dataTipTextRow('Library',libTable{librange,libcol});
%         s.DataTipTemplate.DataTipRows(end+1) = row;
        s.DataTipTemplate.DataTipRows(end+1) = dataTipTextRow('Library',cellstr(libTable{librange,libcol}));
        s.DataTipTemplate.DataTipRows(end+1) = dataTipTextRow('PlateWell',cellstr(libTable{librange,pwcol}));
        if ~isempty(datatip)
            for i = 1:length(datatip)
                tipcol = find(strcmp(datatip{i},libTable.Properties.VariableNames));
                row = dataTipTextRow(datatip{i},libTable{librange,tipcol});
                s.DataTipTemplate.DataTipRows(end+1) = row;
            end
        end
    end
    
    % Scatter controls    
    for c = 1:length(ctrlsel)
        ctrlrange = find(cellfun(@(x)~isempty(strmatch(x,LibPos{ctrlsel(c)},'exact')), libTable.plibName));
        if iscell(libTable{ctrlrange,pp1col})
            p1 = cell2mat(libTable{ctrlrange,pp1col});
        else
            p1 = libTable{ctrlrange,pp1col};
        end
        p2 = ones(size(p1))*l+0.5*rand(size(p1))-0.25;
        s = scatter(p2,p1,70,'rx','linewidth',2);
        s.DataTipTemplate.DataTipRows(1).Label = pp1;
        row = dataTipTextRow('Library',libTable{ctrlrange,libcol});
        s.DataTipTemplate.DataTipRows(end+1) = row;
        row = dataTipTextRow('PlateWell',libTable{ctrlrange,pwcol});
        s.DataTipTemplate.DataTipRows(end+1) = row;
        if ~isempty(datatip)
            for i = 1:length(datatip)
                tipcol = find(strcmp(datatip{i},libTable.Properties.VariableNames));
                row = dataTipTextRow(datatip{i},libTable{ctrlrange,tipcol});
                s.DataTipTemplate.DataTipRows(end+1) = row;
            end
        end
    end
%     xmin = min(libTable{:,pp1col});
%     xmax = max(libTable(:,pp1col));
    % x = xmin:0.1:v(xmax+0.5);
    % DI1 = 1./sqrt(x);
    % DI2 = 2./sqrt(x);
    % plot(x,DI1,'--k')
    % plot(x,DI2,'-.k')
    g = legend(LibPos([reshape(libsel,1,[]),reshape(ctrlsel,1,[])]),'location','eastoutside')
    g.ItemHitFcn = @ui.legendClick;
    ylabel(pp1)
    linkdata on
    c = datacursormode(f); % get the cursor mode
    d = c.createDatatip(s); % create a new datatip
end